이클립스 새로 설치하기

1) 스프링 폴더 만들어두기

2) 이클립스 버전은 이전과 동일한 버전이지만
   설치 경로와 워크스페이스를 다른 곳으로 지정하기

3) 설치 이후 워크스페이스 지정하고 실행

4) 환경설정에서 인코딩, 브라우저, 서버를 설정하기
	%CATALINA_HOME%

5) 설정이 끝나면 이클립스 마켓플레이스에서 spring 혹은 sts 검색하여 
	Spring Tools 3 for Standalone 설치하기

6) 설치끝나면 이클립스 재시작


------------------------------------------------------------

maven 기반 스프링 프로젝트
(https://mvnrepository.com/)

1) 프로젝트 관리
	자바 컴파일러 버전, 인코딩

2) 라이브러리 관리
	직접 다운받던 파일들을
	xml설정으로 자동으로 처리한다
	(기능추가할때마다 찾아다니지 않아도 된다)

-> Project Object Model (pom.xml)


3) 프로젝트 업데이트 (ALT - F5)

------------------------------------------------------------

File - New Project - Spring - Spring Legacy Project
Spring MVC Project
TOP Level Package: com.itbank.*** -> Finish




|   pom.xml			// 프로젝트 컴파일러/빌드/라이브러리 관리 설정 파일
|
+---src
    +---main
    |   +---java		// src/main/java: 자바 클래스 파일을 배치하는 폴더
    |   |   \---com
    |   |       \---itbank
    |   |           \---test2
    |   |                   HomeController.java
    |   |
    |   +---resources		// src/main/resources: 자바 클래스가 아닌 요소를 배치하는 폴더
    |   |   |   log4j.xml
    |   |   |
    |   |   \---META-INF
    |   \---webapp		// src/main/webapp: 웹 관련 파일을 배치하는 폴더(WebContent)
    |       +---resources		// css/javascript
    |       \---WEB-INF			// 웹 설정 폴더
    |           |   web.xml		// web.xml: 웹 프로젝트의 특성을 지정하는 설정 파일(서블릿 등록 및 설정)
    |           |
    |           +---spring
    |           |   |   root-context.xml	// root-context.xml(context.xml)
    |           |   |
    |           |   \---appServlet
    |           |           servlet-context.xml	// servlet-context.xml
    |           |
    |           \---views			// webapp/WEB-INF/views: JSP를 배치하는 폴더
    |                   home.jsp
    |
    \---test
        +---java
        |   \---com
        |       \---itbank
        |           \---test2
        \---resources
                log4j.xml



1) 프로젝트 실행 전에 pom.xml 을 참고하여 필요한 의존성 라이브러리를 다운받고 프로젝트에서 참조할 수 있도록 import 한다

2) web.xml 에 의해 DispatcherServlet 객체를 생성하고 등록한다
	이때 servlet-context.xml 과 root-context.xml 의 내용을 참고하여 필요한 객체들을 스프링 빈의 형태로 객체 생성한다
	스프링 빈은 스프링 컨테이너에 담아두고 필요할 때 호출하여 사용할 수 있다

3) @Controller, @Service, @Repository, @Component 등의 어노테이션이 붙은 클래스는 미리 객체화하여 준비해둔다

4) 개별적으로 등록할 수도 있으나, 패키지 내에서 스프링 빈을 스캔하여 등록하는 방식을 주로 사용한다

5) DispatcherServlet은 어노테이션의 내용을 참고하여 요청 주소에 따라 어떤 클래스의 객체를 지정해야 하는지 알 수 있다

6) 요청은 DispatcherServlet -> Controller의 메서드 -> JSP로 전달된다
























